//require('../src/ctf.js');
// Generated by CoffeeScript 1.12.7
(function () {
    var bind = function (fn, me) {
            return function () {
                return fn.apply(me, arguments);
            };
        },
        extend = function (child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    modes.CTF = (function (superClass) {
        extend(CTF, superClass);

        function CTF() {
            this.victoryConditions = bind(this.victoryConditions, this);
            return CTF.__super__.constructor.apply(this, arguments);
        }

        CTF.prototype.numFlags = 8;

        CTF.prototype.numComPoints = 2;

        CTF.prototype.mapScale = 1;

        CTF.prototype.flagImage = "parts/decals/Symbol12.png";

        CTF.prototype.canStart = function (sayStyff) {
            var alpha, beta;
            if (sayStyff == null) {
                sayStyff = false;
            }
            alpha = this.numInTeam("alpha");
            beta = this.numInTeam("beta");
            if (alpha === 0 && beta === 0) {
                if (sayStyff) {
                    this.say("Not enough players.");
                }
                return false;
            }
            if (beta - alpha > 1) {
                if (sayStyff) {
                    this.say("Team alpha does not have enough players.");
                }
                return false;
            } else if (alpha - beta > 1) {
                if (sayStyff) {
                    this.say("Team beta does not have enough players.");
                }
                return false;
            }
            return true;
        };

        CTF.prototype.victoryConditions = function () {
            var capped, cappedArr, i, id, k, len, player, ref, ref1, stillThere, thing;
            if (this.state !== "running") {
                return;
            }
            capped = {};
            ref = sim.things;
            for (id in ref) {
                thing = ref[id];
                if (thing.flag) {
                    capped[thing.side] = (capped[thing.side] || 0) + 1;
                }
            }
            cappedArr = (function () {
                var results;
                results = [];
                for (k in capped) {
                    results.push(k);
                }
                return results;
            })();
            if (cappedArr.length === 0) {
                return;
            }
            if (cappedArr.length === 1 && cappedArr[0] !== 'neutral') {
                this.winningSide = cappedArr[0];
            }
            if (this.winningSide) {
                this.endOfGame();
                return;
            }
            if (!this.local && !this.aiTestMode) {
                stillThere = false;
                ref1 = this.players;
                for (i = 0, len = ref1.length; i < len; i++) {
                    player = ref1[i];
                    if (!player.ai && player.connected && !player.afk && player.side !== "spectators") {
                        stillThere = true;
                    }
                }
                if (!stillThere) {
                    this.say("Every one left. Ending game.");
                    this.winningSide = false;
                    this.endOfGame();
                    return;
                }
            }
            if (this.step > 16 * 60 * 30) {
                this.winningSide = false;
                this.endOfGame();
            }
        };

        CTF.prototype.switchSide = function (player, side) {
            if (!player) {
                return;
            }
            if (player.kickTime > now() - 15000) {
                return;
            }
            if (this.local && !sim.galaxyStar && !sim.challenge) {
                player.side = side;
                return;
            }
            if (this.state !== "waiting") {
                return;
            }
            player.side = side;
            if (side === "spectators") {
                player.streek = 0;
            }
            return player.lastActiveTime = Date.now();
        };

        return CTF;

    })(Sim);

}).call(this);


