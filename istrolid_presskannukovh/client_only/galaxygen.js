//from src/galaxygen.js
// Generated by CoffeeScript 1.10.0
(function () {
    var BOSS, FREE_AI, MINI_BOSSES;

    BOSS = "HgIgIyYpFBQPCiIBChoBChIBHhIBHhoBHiIBHA4%2FCA4%2FDA4%2FIA4%2FCBY%2BDBY%2BCB48DB48HB48IB48IBY%2BHBY%2BIhI8BhI8GhI%2BBho9DhI%2BBiI9IiI9Iho9CCY9GiI%2BDiI%2BDCY%2BHCY%2BDho8ICY9Gho8FxIHCAoZERIHIAoZHgYZCgYZCgIgBSYpIx4pBR4pBRYpIxYpBQ4HBQoHIw4HIwoHDyYHEB4BGSYHEBYBGBYBGB4BBQYHGQYHIwYHBwUbDQUbGwUbIQUbERoHFxoHFBgPFAgPFBAPEA4PGA4PEAoPGAoPDAoPHAoPFAwPEB4vGB4vCiI3HiI3EBYwGBYwCho1Hho1ChI0HhI0";

    MINI_BOSSES = [BOSS, BOSS, BOSS];

    FREE_AI = ["AlphaSwarm", "CreepingHoard", "BullDogs"];

    galaxyMap.generateStub = function () {
        var _r, a, aa, ab, ac, ad, ae, allStars, b, bossStar, d, data, dist, emptyStar, hasPart, i, interct, j, justWon,
            k, l, len, len1, len10, len11, len12, len2, len3, len4, len5, len6, len7, len8, len9, m, myStar, n, o,
            other, p, p1, p2, part, path, paths, pos, q, r, ref, s, spec, star, starNames, starPosList, stars, u,
            unlockedParts, v, w, x, y, z;
        interct = function (p0, p1, p2, p3) {
            var i, s, s1, s2, t;
            s1 = v2.create();
            s2 = v2.create();
            s1[0] = p1[0] - p0[0];
            s1[1] = p1[1] - p0[1];
            s2[0] = p3[0] - p2[0];
            s2[1] = p3[1] - p2[1];
            s = (-s1[1] * (p0[0] - p2[0]) + s1[0] * (p0[1] - p2[1])) / (-s2[0] * s1[1] + s1[0] * s2[1]);
            t = (s2[0] * (p0[1] - p2[1]) - s2[1] * (p0[0] - p2[0])) / (-s2[0] * s1[1] + s1[0] * s2[1]);
            if (s > 0 && s < 1 && t > 0 && t < 1) {
                i = v2.create();
                i[0] = p0[0] + (t * s1[0]);
                i[1] = p0[1] + (t * s1[1]);
                return 1;
            }
            return null;
        };
        starPosList = [[-1267.6885009765626, 1380.2528076171875], [1315.9303466796875, -1374.8926025390626], [-254.60974121093753, -259.96994628906253], [-329.6526123046875, -24.1209228515625], [-206.3678955078125, 179.5668701171875], [-40.2015380859375, 222.44851074218752], [83.0831787109375, 174.2066650390625], [184.9270751953125, 18.760717773437502], [174.2066650390625, -142.04543457031252], [-24.1209228515625, -335.0128173828125], [-544.0608154296875, -152.7658447265625], [-753.1088134765625, 217.08830566406252], [-704.8669677734375, 581.5822509765626], [-527.9802001953126, 806.7108642578125], [-158.1260498046875, 1005.0384521484376], [329.6526123046875, 1122.9629638671877], [672.7057373046875, 1074.7211181640625], [1080.0813232421876, 785.2700439453125], [1396.3334228515625, 286.77097167968753], [1492.8171142578126, -147.4056396484375], [479.7383544921875, 115.24440917968751], [694.1465576171876, -109.8842041015625], [635.1843017578126, -710.2271728515625], [318.9322021484375, -1069.3609130859377], [-506.5393798828125, -1267.6885009765626], [-988.9578369140626, -929.9955810546876], [-1412.4140380859376, -586.9424560546876], [-1583.9406005859375, -125.9648193359375], [-1696.5049072265626, 318.9322021484375], [-1562.4997802734376, 956.7966064453126], [-1096.1619384765627, -640.5445068359376], [-833.5118896484375, -790.6302490234375], [34.8413330078125, -790.6302490234375], [388.6148681640625, -463.6577392578125], [-308.2117919921875, -887.1139404296875], [1128.3231689453125, -769.1894287109376], [1133.6833740234376, -88.44338378906251], [988.9578369140626, 292.1311767578125], [629.8240966796875, 619.1036865234375], [195.64748535156252, 763.8292236328125], [-356.4536376953125, 619.1036865234375], [-924.6353759765626, -174.2066650390625], [-1289.1293212890625, 142.04543457031252], [-1171.2048095703126, 399.3352783203125], [-1122.9629638671877, 1047.9200927734375], [-115.24440917968751, -549.4210205078125], [-447.57712402343753, -544.0608154296875], [-753.1088134765625, -335.0128173828125], [-565.5016357421875, 50.921948242187504], [-404.69548339843755, 361.8138427734375], [13.4005126953125, 436.8567138671875], [597.6628662109375, 436.8567138671875], [-56.2821533203125, -29.481127929687503], [147.4056396484375, -506.5393798828125], [388.6148681640625, -211.7281005859375], [249.24953613281252, 388.6148681640625], [656.6251220703125, -361.8138427734375], [731.6679931640625, 88.44338378906251], [972.8772216796875, -522.6199951171875], [903.1945556640626, -1064.0007080078126], [1417.7742431640627, -544.0608154296875], [704.8669677734375, 822.7914794921876], [903.1945556640626, 597.6628662109375], [125.9648193359375, 1058.6405029296875], [-88.44338378906251, 1267.6885009765626], [-565.5016357421875, 978.2374267578126], [-999.6782470703125, 704.8669677734375], [-1412.4140380859376, 549.4210205078125], [-104.52399902343751, -1026.4792724609376], [-211.7281005859375, -753.1088134765625], [-527.9802001953126, -710.2271728515625], [-1219.4466552734375, -222.44851074218752], [-833.5118896484375, 2.6801025390625], [-431.49650878906255, -324.29240722656255], [-426.1363037109375, 184.9270751953125], [-179.5668701171875, 410.0556884765625], [313.57199707031253, 168.84645996093752], [-67.0025634765625, -201.0076904296875], [-206.3678955078125, -61.6423583984375], [254.60974121093753, -292.1311767578125], [377.89445800781255, 356.4536376953125], [-50.921948242187504, 624.4638916015625], [838.8720947265625, -324.29240722656255]];
        starNames = "Sigma\nAsteropaios\nCassiopeia\nOrion\nDioscuri\nMosaic\nTiger\nIris\nHyperion\nProxima Dioscuri\nPeleus\nAstraeus\nCymopoleia\nSerpent\nEubuleus\nAra Alatheia\nProxima Ilioneus\nDioscuri\nHyperbius\nBanana\nArrowhead\nVortex\nEpsilon Eubuleus\nIchnaea\nCrux Draconis\nNemesis\nPhoroneus\nFishscale\nBlueberry\nBellflare\nOmega Orithyia\nUpsilon Proioxis\nUrsa\nAstraeus\nSolymus\nAquila Porphyrion\nZephyrus\nBeta\nIcarius\nEioneus\nSawblade\nDragontooth\nBowl\nOmega\nSagitta Porphyrion\nLyra Acallaris\nOrithyia\nAurigae\nCrown\nSpiderleg\nEioneus\nCanis Aldebaran\nPavo Calesius\nLeporis\nHemithea\nSerpent\nChronos\nNemo\nZephyrus\nCalesius\nPolystratus\nAethalides\nOctantis\nSextantis\nAntini\nBestla\nCerberi\nGalli\nPunarvasu\nPrani\nDou\nEridu\nPegasi\nSextantis\nPushya\nLibrae\nKini\nAmurru\nMaenali\nShravishtha\nAntliae\nIrmo\nLachesis\nMaenali\nPerkunas\nPascia\nApep\nOrionis\nAuseklis\nAker\nNoptri\nNiu\nSceptri\nChani\nShatabhisha\nAngith\nShi\nGoll\nKrily\nMali\nBani\nJenaii\nVortu\nDelphini\nOrome\nAo-Jun\nTarandi".split("\n");
        stars = [];
        paths = [];
        _r = v2.create();
        for (l = 0, len = starPosList.length; l < len; l++) {
            pos = starPosList[l];
            if (Math.random() > .8) {
                continue;
            }
            s = {};
            s.id = rid();
            s.pos = pos;
            s.name = starNames.pop();
            v2.random(_r);
            v2.scale(_r, 20);
            v2.add(s.pos, _r);
            s.good = false;
            s.unlocksParts = [];
            stars.push(s);
        }
        dist = 0;
        for (m = 0, len1 = stars.length; m < len1; m++) {
            star = stars[m];
            if (v2.mag(star.pos) > dist) {
                dist = v2.mag(star.pos);
                myStar = star;
            }
        }
        myStar.side = "alpha";
        myStar.type = "home";
        myStar.size = 1;
        justWon = myStar;
        for (i = n = 1; n < 7; i = ++n) {
            for (a = o = 0, len2 = stars.length; o < len2; a = ++o) {
                star = stars[a];
                if (star.good > 4) {
                    continue;
                }
                for (b = q = 0, len3 = stars.length; q < len3; b = ++q) {
                    other = stars[b];
                    if (a === b) {
                        continue;
                    }
                    d = v2.distance(star.pos, other.pos);
                    if (((i - 1) * 200 < d && d < i * 200)) {
                        paths.push([d, star, other]);
                        star.good += 1;
                        other.good += 1;
                    }
                }
            }
        }
        for (j = r = 0, len4 = paths.length; r < len4; j = ++r) {
            p1 = paths[j];
            for (k = u = 0, len5 = paths.length; u < len5; k = ++u) {
                p2 = paths[k];
                if (j !== k && p2[0] !== null && p1[0] !== null && interct(p1[1].pos, p1[2].pos, p2[1].pos, p2[2].pos)) {
                    if (p2[0] > p1[0]) {
                        p2[0] = null;
                    } else {
                        p1[0] = null;
                    }
                }
            }
        }
        paths = (function () {
            var len6, results, v;
            results = [];
            for (v = 0, len6 = paths.length; v < len6; v++) {
                p = paths[v];
                if (p[0] !== null) {
                    results.push(p);
                }
            }
            return results;
        })();
        myStar.fill = true;
        for (i = v = 0; v < 100; i = ++v) {
            for (w = 0, len6 = paths.length; w < len6; w++) {
                path = paths[w];
                if (path[1].fill || path[2].fill) {
                    path[1].fill = true;
                    path[2].fill = true;
                }
            }
        }
        stars = (function () {
            var len7, results, x;
            results = [];
            for (x = 0, len7 = stars.length; x < len7; x++) {
                s = stars[x];
                if (s.fill) {
                    results.push(s);
                }
            }
            return results;
        })();
        paths = (function () {
            var len7, results, x;
            results = [];
            for (x = 0, len7 = paths.length; x < len7; x++) {
                p = paths[x];
                if (p[1].fill) {
                    results.push(p);
                }
            }
            return results;
        })();
        dist = 0;
        for (x = 0, len7 = stars.length; x < len7; x++) {
            star = stars[x];
            d = v2.distance(star.pos, myStar.pos);
            if (d > dist) {
                dist = d;
                bossStar = star;
            }
        }
        bossStar.size = 1;
        bossStar.type = "boss";
        bossStar.ai = "Boss";
        bossStar.boss = BOSS;
        for (y = 0, len8 = stars.length; y < len8; y++) {
            star = stars[y];
            d = v2.distance(star.pos, bossStar.pos);
            if (d < 900) {
                star.size = 3;
            } else if (d < 2000) {
                star.size = 2;
            } else {
                star.size = 1;
            }
            if (!star.ai) {
                if (star.size === 3) {
                    star.ai = choose(ais.hard);
                    star.mapSize = 1.4 + Math.random() * .5;
                    star.spots = 8;
                } else if (star.size === 2) {
                    star.ai = choose(ais.med);
                    star.mapSize = 1 + Math.random() * .4;
                    star.spots = 6;
                } else if (star.size === 1) {
                    star.ai = choose(ais.easy);
                    star.mapSize = .6 + Math.random() * .3;
                    star.spots = 4;
                }
            }
        }
        unlockedParts = {};
        for (z = 0, len9 = easyPlayerBuildBar.length; z < len9; z++) {
            spec = easyPlayerBuildBar[z];
            ref = fromShort(spec);
            for (aa = 0, len10 = ref.length; aa < len10; aa++) {
                p = ref[aa];
                unlockedParts[p.type] = true;
            }
        }
        allStars = (function () {
            var ab, len11, results;
            results = [];
            for (ab = 0, len11 = stars.length; ab < len11; ab++) {
                s = stars[ab];
                if (s.id !== bossStar.id && s.id !== myStar.id) {
                    results.push(s);
                }
            }
            return results;
        })();
        allStars.sort(function () {
            return Math.random();
        });
        for (k in parts) {
            part = parts[k];
            if (!part.prototype.hide && !unlockedParts[k] && part.prototype.tab === "weapons") {
                for (i = ab = 0; ab < 100; i = ++ab) {
                    star = choose(stars);
                    if (star.type === "home" || star.type === "boss") {
                        continue;
                    }
                    if (star.unlocksParts.length > 0) {
                        continue;
                    }
                    star.unlocksParts.push(k);
                    break;
                }
            }
        }
        emptyStar = (function (_this) {
            return function () {
                var ac, len11;
                for (ac = 0, len11 = stars.length; ac < len11; ac++) {
                    star = stars[ac];
                    if (star.type === "home" || star.type === "boss") {
                        continue;
                    }
                    if (star.unlocksParts.length === 0) {
                        return star;
                    }
                }
                return null;
            };
        })(this);
        for (k in parts) {
            part = parts[k];
            if (!part.prototype.hide && !unlockedParts[k] && part.prototype.tab !== "weapons") {
                for (i = ac = 0; ac < 100; i = ++ac) {
                    star = emptyStar() || choose(stars);
                    if (star.type === "home" || star.type === "boss") {
                        continue;
                    }
                    if (star.unlocksParts.length > 0) {
                        hasPart = parts[star.unlocksParts[0]];
                        if (hasPart.prototype.tab === "weapons") {
                            continue;
                        }
                        if (part.prototype.tab === "armor" && hasPart.prototype.tab !== "armor") {
                            continue;
                        }
                    }
                    if (star.unlocksParts.length > 2) {
                        continue;
                    }
                    star.unlocksParts.push(k);
                    break;
                }
            }
        }
        data = [];
        for (ad = 0, len11 = stars.length; ad < len11; ad++) {
            star = stars[ad];
            data += "\n\nstars.push\n    id: '" + star.id + "'\n    name: \"" + star.name + "\"\n    about: \"\"\n    ai: \"" + star.ai + "\"\n    difficulty: " + star.size + "\n    mapSize: " + star.mapSize + "\n    mapNumCPs: " + star.spots + "\n    unlocks: " + (JSON.stringify(star.unlocksParts)) + "\n    pos: [" + (Math.floor(star.pos[0])) + ", " + (Math.floor(star.pos[1])) + "]";
        }
        data += "\n\n";
        for (ae = 0, len12 = paths.length; ae < len12; ae++) {
            p = paths[ae];
            data += "\npaths.push(['" + p[1].id + "', '" + p[2].id + "'])";
        }
        return console.log(data);
    };

}).call(this);
;


