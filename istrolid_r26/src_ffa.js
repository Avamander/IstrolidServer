//require('../src/ffa.js');
// Generated by CoffeeScript 1.12.7
(function () {
    var bind = function (fn, me) {
            return function () {
                return fn.apply(me, arguments);
            };
        },
        extend = function (child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    window.modes.FFA = (function (superClass) {
        extend(FFA, superClass);

        function FFA() {
            this.victoryConditions = bind(this.victoryConditions, this);
            return FFA.__super__.constructor.apply(this, arguments);
        }

        FFA.prototype.defaultMoney = 80;

        FFA.prototype.moneyInc = 100;

        FFA.prototype.serverType = "FFA";

        FFA.prototype.victoryGoal = 2000;

        FFA.prototype.deathPenalty = 0.2;

        FFA.prototype.numComPoints = 16;

        FFA.prototype.mapScale = 1.2;

        FFA.prototype.init = function () {
            var i, len, p, ref, results;
            ref = this.players;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                p = ref[i];
                if (p.side === "beta") {
                    results.push(p.side = "alpha");
                }
            }
            return results;
        };

        FFA.prototype.start = function () {
            var _, i, len, p, ref, results, spawns, t;
            FFA.__super__.start.call(this);
            ref = this.players;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                p = ref[i];
                p.maxMoney = this.defaultMoney;
                spawns = (function () {
                    var ref1, results1;
                    ref1 = this.things;
                    results1 = [];
                    for (_ in ref1) {
                        t = ref1[_];
                        if (t.spawn === p.side) {
                            results1.push(t);
                        }
                    }
                    return results1;
                }).call(this);
                if (spawns.length > 0) {
                    results.push(p.usingSpawn = spawns[Math.floor(Math.random() * spawns.length)]);
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };

        FFA.prototype.spacesRebuild = function () {
            var _, ref, results, t;
            this.unitSpaces = {
                'alpha': new HSpace(500),
                'beta': new HSpace(500)
            };
            this.bulletSpaces = {
                'alpha': new HSpace(100),
                'beta': new HSpace(100)
            };
            this.maxRadius = 0;
            ref = this.things;
            results = [];
            for (_ in ref) {
                t = ref[_];
                if (t.dead) {
                    continue;
                }
                if (t.unit) {
                    this.unitSpaces["alpha"].insert(t);
                    this.unitSpaces["beta"].insert(t);
                    if (t.radius > this.maxRadius) {
                        this.maxRadius = t.radius;
                    }
                }
                if (t.bullet) {
                    this.bulletSpaces["alpha"].insert(t);
                    results.push(this.bulletSpaces["beta"].insert(t));
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };

        FFA.prototype.switchSide = function (player, side) {
            if (!player) {
                return;
            }
            if (player.kickTime > now() - 15000) {
                return;
            }
            if (this.local && !sim.galaxyStar && !sim.challenge) {
                player.side = side;
                return;
            }
            if (side === "beta") {
                side = "alpha";
            }
            if (this.state !== "waiting") {
                return;
            }
            player.side = side;
            if (side === "spectators") {
                player.streek = 0;
            }
            return player.lastActiveTime = Date.now();
        };

        FFA.prototype.canStart = function (sayStyff) {
            if (sayStyff == null) {
                sayStyff = false;
            }
            if (this.numInTeam("alpha") >= 1) {
                return true;
            }
            this.say("Not enough players");
            return false;
        };

        FFA.prototype.surrender = function (player) {
        };

        FFA.prototype.victoryConditions = function () {
            var i, j, len, len1, player, ref, ref1, stillThere;
            if (this.state !== "running") {
                return;
            }
            ref = this.players;
            for (i = 0, len = ref.length; i < len; i++) {
                player = ref[i];
                if (player.connected && !player.afk && player.side !== "spectators" && player.money >= this.victoryGoal) {
                    this.winningSide = player.name;
                    this.endOfGame();
                }
            }
            if (!this.local && !this.aiTestMode) {
                stillThere = false;
                ref1 = this.players;
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                    player = ref1[j];
                    if (!player.ai && player.connected && !player.afk && player.side !== "spectators") {
                        stillThere = true;
                    }
                }
                if (!stillThere) {
                    this.winningSide = false;
                    this.endOfGame();
                }
            }
        };

        return FFA;

    })(window.Sim);

}).call(this);


