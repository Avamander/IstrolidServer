//require('../src/ffa.js');
// Generated by CoffeeScript 1.12.7
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  modes.FFA = (function(superClass) {
    extend(FFA, superClass);

    function FFA() {
      this.victoryConditions = bind(this.victoryConditions, this);
      return FFA.__super__.constructor.apply(this, arguments);
    }

    FFA.prototype.ffa = true;

    FFA.prototype.numComPoints = 13;

    FFA.prototype.init = function() {
      var i, len, p, ref, results;
      ref = this.players;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        if (p.side === "beta") {
          results.push(p.side = "alpha");
        }
      }
      return results;
    };

    FFA.prototype.surrender = function(player) {};

    FFA.prototype.spacesRebuild = function() {
      var _, bspace, i, len, maxr, p, ref, ref1, results, t, uspace;
      uspace = new HSpace(500);
      bspace = new HSpace(100);
      maxr = 0;
      ref = this.things;
      for (_ in ref) {
        t = ref[_];
        if (t.dead) {
          continue;
        }
        if (t.unit) {
          uspace.insert(t);
          if (t.radius > maxr) {
            maxr = t.radius;
          }
        }
        if (t.bullet) {
          bspace.insert(t);
        }
      }
      this.unitSpaces = {
        alpha: uspace,
        beta: uspace
      };
      this.bulletSpaces = {
        alpha: bspace,
        beta: uspace
      };
      this.maxRadius = {
        alpha: maxr,
        beta: maxr
      };
      ref1 = this.players;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        p = ref1[i];
        if (p.side === "spectators") {
          continue;
        }
        this.unitSpaces[p.side] = uspace;
        this.bulletSpaces[p.side] = bspace;
        results.push(this.maxRadius[p.side] = maxr);
      }
      return results;
    };

    FFA.prototype.switchSide = function(player, side) {
      if (!player) {
        return;
      }
      if (player.kickTime > now() - 15000) {
        return;
      }
      if (this.local && !sim.galaxyStar && !sim.challenge) {
        player.side = side;
        return;
      }
      if (side === "beta") {
        side = "alpha";
      }
      if (this.state !== "waiting") {
        return;
      }
      player.side = side;
      if (side === "spectators") {
        player.streek = 0;
      }
      return player.lastActiveTime = Date.now();
    };

    FFA.prototype.startGame = function(player, real) {
      if (real == null) {
        real = false;
      }
      if (FFA.__super__.startGame.call(this, player, real)) {
        return this.say("FFA ui script: https://gist.github.com/Rio6/df4b990ddd0d25f9ad3b48e0fc8d0f35");
      }
    };

    FFA.prototype.start = function() {
      var i, len, p, ref;
      ref = this.players;
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        if (p.side === "alpha") {
          p.side = p.name;
        }
      }
      return FFA.__super__.start.call(this);
    };

    FFA.prototype.canStart = function(sayStyff) {
      if (sayStyff == null) {
        sayStyff = false;
      }
      if (this.numInTeam("alpha") > 1) {
        return true;
      }
      this.say("Not enough players");
      return false;
    };

    FFA.prototype.victoryConditions = function() {
      var _, i, len, p, players, ref, spawns, t;
      if (this.state !== "running") {
        return;
      }
      players = [];
      ref = this.players;
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        if (p.side === "spectators") {
          continue;
        }
        spawns = (function() {
          var ref1, results;
          ref1 = this.things;
          results = [];
          for (_ in ref1) {
            t = ref1[_];
            if (t.spawn === p.side) {
              results.push(t);
            }
          }
          return results;
        }).call(this);
        if (spawns.length !== p.lastSpawnCount) {
          if (spawns.length === 0) {
            this.say(p.name + " lost their spawn");
          }
          p.lastSpawnCount = spawns.length;
        }
        if (spawns.length > 0) {
          players.push(p);
        }
      }
      if (players.length === 1) {
        this.winningSide = players[0].side;
      } else if (players.length === 0) {
        if (!this.local && !this.aiTestMode) {
          this.say("Every one left. Ending game.");
          this.winningSide = false;
          this.endOfGame();
          return;
        }
      }
      if (this.winningSide) {
        this.endOfGame();
      } else if (this.step > 16 * 60 * 30) {
        this.winningSide = false;
        this.endOfGame();
      }
    };

    FFA.prototype.endOfGame = function() {
      var i, len, p, ref, results;
      FFA.__super__.endOfGame.call(this);
      ref = this.players;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        if (p.side === "spectators") {
          continue;
        }
        results.push(p.side = "alpha");
      }
      return results;
    };

    return FFA;

  })(Sim);

}).call(this);


